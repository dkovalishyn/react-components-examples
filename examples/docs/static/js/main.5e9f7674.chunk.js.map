{"version":3,"sources":["components/Student.jsx","components/StudentsList.jsx","components/AddStudentForm/AddStudentForm.js","components/AddStudentForm/index.js","App.js","serviceWorker.js","index.js"],"names":["Student","name","StudentsList","students","map","student","key","FORM_KEY","AddStudentForm","props","serializeValues","localStorage","setItem","JSON","stringify","state","console","log","setName","value","target","setState","formValues","handleSubmit","e","preventDefault","parse","getItem","prevProps","prevState","snapshot","clearTimeout","this","saveTimer","setTimeout","onSubmit","type","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RAIeA,EAFC,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAAc,6BAAMA,ICIrBC,EAHM,SAAC,GAAD,SAAGC,SACbC,IAAI,SAAAC,GAAO,OAAI,kBAAC,EAAD,eAASC,IAAKD,EAAQJ,MAAUI,O,mjBCD1D,IAAME,EAAW,iBCDFC,E,YDIb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAoBRC,gBAAkB,WAChBC,aAAaC,QAAQL,EAAUM,KAAKC,UAAU,EAAKC,QACnDC,QAAQC,IAAI,kBAvBK,EA0BnBC,QAAU,YAA4B,IAAfC,EAAc,EAAxBC,OAAUD,MACrB,EAAKE,SAAS,kBAAqB,CACjCC,WAAW,EAAD,GADE,EAAGA,WACL,CAAmBrB,KAAMkB,QA5BpB,EAgCnBI,aAAe,SAAAC,GACbA,EAAEC,iBACF,EAAKJ,SAAS,gBAAGlB,EAAH,EAAGA,SAAUmB,EAAb,EAAaA,WAAb,MAA+B,CAC3CnB,SAAS,GAAD,mBAAMA,GAAN,MAAqBmB,KAC7BA,WAAY,CACVrB,KAAM,QAlCV,EAAKc,MAAQ,CACXO,WAAW,EAAD,CACRrB,KAAM,IACHY,KAAKa,MAAMf,aAAagB,QAAQpB,KAErCJ,SAAU,IARK,E,gFAYAyB,EAAWC,EAAWC,GACvCC,aAAaC,KAAKC,WAClBD,KAAKC,UAAYC,WAAWF,KAAKtB,gBAAiB,O,6CAIlDqB,aAAaC,KAAKC,a,+BAwBV,IAAD,EAIHD,KAAKjB,MAFPZ,EAFK,EAELA,SACcF,EAHT,EAGLqB,WAAcrB,KAGhB,OACE,oCACE,0BAAMkC,SAAUH,KAAKT,cACnB,2BAAOa,KAAK,OAAOC,SAAUL,KAAKd,QAASC,MAAOlB,IAClD,2FAEF,kBAAC,EAAD,CAAcE,SAAUA,S,GAvDHmC,a,MEGdC,MAJf,WACE,OAAO,kBAAC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5e9f7674.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Student = ({ name }) => <div>{name}</div>;\r\n\r\nexport default Student;\r\n","import React from \"react\";\r\nimport Student from \"./Student\";\r\n\r\nconst StudentsList = ({ students }) =>\r\n  students.map(student => <Student key={student.name} {...student} />);\r\n\r\nexport default StudentsList;\r\n","import React, { Component } from \"react\";\r\nimport StudentsList from \"../StudentsList\";\r\n\r\nconst FORM_KEY = \"AddStudentForm\";\r\n\r\nclass AddStudentForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      formValues: {\r\n        name: \"\",\r\n        ...JSON.parse(localStorage.getItem(FORM_KEY))\r\n      },\r\n      students: []\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    clearTimeout(this.saveTimer);\r\n    this.saveTimer = setTimeout(this.serializeValues, 2000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this.saveTimer);\r\n  }\r\n\r\n  serializeValues = () => {\r\n    localStorage.setItem(FORM_KEY, JSON.stringify(this.state));\r\n    console.log(\"Values saved!\");\r\n  };\r\n\r\n  setName = ({ target: { value } }) => {\r\n    this.setState(({ formValues }) => ({\r\n      formValues: { ...formValues, name: value }\r\n    }));\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.setState(({ students, formValues }) => ({\r\n      students: [...students, { ...formValues }],\r\n      formValues: {\r\n        name: \"\"\r\n      }\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      students,\r\n      formValues: { name }\r\n    } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input type=\"text\" onChange={this.setName} value={name} />\r\n          <button>Сохранить</button>\r\n        </form>\r\n        <StudentsList students={students} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddStudentForm;\r\n","import AddStudentForm from './AddStudentForm';\r\n\r\nexport default AddStudentForm;\r\n","import React from \"react\";\nimport AddStudentForm from './components/AddStudentForm';\nimport \"./App.css\";\n\nfunction App() {\n  return <AddStudentForm />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}